{"version":3,"file":"tplink-lightbulb.modern.js","sources":["../src/index.js"],"sourcesContent":["import dgram from 'dgram'\nimport EventEmitter from 'events'\n\nexport default class TPLSmartDevice {\n  constructor (ip) {\n    this.ip = ip\n  }\n\n  // Scan for lightbulbs on your network\n  static scan (filter, broadcast = '255.255.255.255') {\n    const emitter = new EventEmitter()\n    const client = dgram.createSocket({\n      type: 'udp4',\n      reuseAddr: true\n    })\n    client.bind(9998, undefined, () => {\n      client.setBroadcast(true)\n      const msgBuf = TPLSmartDevice.encrypt(Buffer.from('{\"system\":{\"get_sysinfo\":{}}}'))\n      client.send(msgBuf, 0, msgBuf.length, 9999, broadcast)\n    })\n    client.on('message', (msg, rinfo) => {\n      const decryptedMsg = this.decrypt(msg).toString('ascii')\n      const jsonMsg = JSON.parse(decryptedMsg)\n      const sysinfo = jsonMsg.system.get_sysinfo\n\n      if (filter && sysinfo.mic_type !== filter) {\n        return\n      }\n\n      const light = new TPLSmartDevice(rinfo.address)\n      light._info = rinfo\n      light._sysinfo = sysinfo\n      light.host = rinfo.address\n      light.port = rinfo.port\n      light.name = sysinfo.alias\n      light.deviceId = sysinfo.deviceId\n\n      emitter.emit('light', light)\n    })\n    emitter.stop = () => client.close()\n    return emitter\n  }\n\n  // Send a message to a lightbulb (for RAW JS message objects)\n  send (msg) {\n    return new Promise((resolve, reject) => {\n      if (!this.ip) {\n        return reject(new Error('IP not set.'))\n      }\n      const client = dgram.createSocket('udp4')\n      const message = this.encrypt(Buffer.from(JSON.stringify(msg)))\n      client.send(message, 0, message.length, 9999, this.ip, (err, bytes) => {\n        if (err) {\n          return reject(err)\n        }\n        client.on('message', msg => {\n          resolve(JSON.parse(this.decrypt(msg).toString()))\n          client.close()\n        })\n      })\n    })\n  }\n\n  // TODO: wifi needs more testing. it seems very broken.\n\n  // Scans the wifi networks in range of the device\n  async listwifi () {\n    const r1 = await this.send({\n      netif: {\n        get_scaninfo: {\n          refresh: 1\n        }\n      }\n    })\n\n    if (r1?.netif?.get_scaninfo?.ap_list) {\n      return r1.netif.get_scaninfo.ap_list\n    } else {\n      // on fail, try older message-format\n      const r2 = await this.send({\n        'smartlife.iot.common.softaponboarding': {\n          get_scaninfo: {\n            refresh: 1\n          }\n        }\n      })\n      if (r2 && r2['smartlife.iot.common.softaponboarding']?.get_scaninfo?.ap_list) {\n        return r2['smartlife.iot.common.softaponboarding'].get_scaninfo.ap_list\n      }\n    }\n  }\n\n  // Connects the device to the access point in the parameters\n  async connectwifi (ssid, password, keyType = 1, cypherType = 0) {\n    const r1 = await this.send({\n      netif: {\n        set_stainfo: {\n          cypher_type: cypherType,\n          key_type: keyType,\n          password,\n          ssid\n        }\n      }\n    })\n\n    if (r1?.netif?.set_stainfo?.err_code === 0) {\n      return true\n    }\n\n    // on fail, try older message-format\n\n    const r2 = await this.send({\n      'smartlife.iot.common.softaponboarding': {\n        set_stainfo: {\n          cypher_type: cypherType,\n          key_type: keyType,\n          password,\n          ssid\n        }\n      }\n    })\n    if (r2['smartlife.iot.common.softaponboarding'] && r2['smartlife.iot.common.softaponboarding'].err_msg) {\n      throw new Error(r2['smartlife.iot.common.softaponboarding'].err_msg)\n    } else {\n      return true\n    }\n  }\n\n  // Get info about the TPLSmartDevice\n  async info () {\n    const r = await this.send({ system: { get_sysinfo: {} } })\n    return r.system.get_sysinfo\n  }\n\n  // Set power-state of lightbulb\n  async power (powerState = true, transition = 0, options = {}) {\n    const info = await this.info()\n    if (typeof info.relay_state !== 'undefined') {\n      return this.send({\n        system: {\n          set_relay_state: {\n            state: powerState ? 1 : 0\n          }\n        }\n      })\n    } else {\n      const r = await this.send({\n        'smartlife.iot.smartbulb.lightingservice': {\n          transition_light_state: {\n            ignore_default: 1,\n            on_off: powerState ? 1 : 0,\n            transition_period: transition,\n            ...options\n          }\n        }\n      })\n      return r['smartlife.iot.smartbulb.lightingservice'].transition_light_state\n    }\n  }\n\n  // Set led-state of lightbulb\n  led (ledState = true) {\n    return this.send({ system: { set_led_off: { off: ledState ? 0 : 1 } } })\n  }\n\n  // Set the name of lightbulb\n  async setName (newAlias) {\n    const info = await this.info()\n    return typeof info.dev_name !== 'undefined'\n      ? this.send({ system: { set_dev_alias: { alias: newAlias } } })\n      : this.send({ 'smartlife.iot.common.system': { set_dev_alias: { alias: newAlias } } })\n  }\n\n  // Get schedule info\n  async daystat (month, year) {\n    const now = new Date()\n    month = month || now.getMonth() + 1\n    year = year || now.getFullYear()\n    const r = await this.send({ 'smartlife.iot.common.schedule': { get_daystat: { month: month, year: year } } })\n    return r['smartlife.iot.common.schedule'].get_daystat\n  }\n\n  // Get cloud info from bulb\n  async cloud () {\n    const r = await this.send({ 'smartlife.iot.common.cloud': { get_info: {} } })\n    return r['smartlife.iot.common.cloud'].get_info\n  }\n\n  // Get schedule from bulb\n  async schedule () {\n    const r = await this.send({ 'smartlife.iot.common.schedule': { get_rules: {} } })\n    return r['smartlife.iot.common.schedule'].get_rules\n  }\n\n  // Get operational details from bulb\n  details () {\n    return this.send({ 'smartlife.iot.smartbulb.lightingservice': { get_light_details: {} } })\n  }\n\n  //  Reboot the device\n  reboot () {\n    return this.send({ 'smartlife.iot.common.system': { reboot: { delay: 1 } } })\n  }\n\n  // Badly encrypt message in format bulbs use\n  static encrypt (buffer, key = 0xAB) {\n    for (let i = 0; i < buffer.length; i++) {\n      const c = buffer[i]\n      buffer[i] = c ^ key\n      key = buffer[i]\n    }\n    return buffer\n  }\n\n  encrypt (buffer, key) {\n    return TPLSmartDevice.encrypt(buffer, key)\n  }\n\n  // Badly decrypt message from format bulbs use\n  static decrypt (buffer, key = 0xAB) {\n    for (let i = 0; i < buffer.length; i++) {\n      const c = buffer[i]\n      buffer[i] = c ^ key\n      key = c\n    }\n    return buffer\n  }\n\n  decrypt (buffer, key) {\n    return TPLSmartDevice.decrypt(buffer, key)\n  }\n}\n"],"names":["TPLSmartDevice","constructor","ip","scan","filter","broadcast","emitter","EventEmitter","client","dgram","createSocket","type","reuseAddr","bind","undefined","setBroadcast","msgBuf","encrypt","Buffer","from","send","length","on","msg","rinfo","decryptedMsg","decrypt","toString","jsonMsg","JSON","parse","sysinfo","system","get_sysinfo","mic_type","light","address","_info","_sysinfo","host","port","name","alias","deviceId","emit","stop","close","Promise","resolve","reject","Error","message","stringify","err","bytes","listwifi","r1","netif","get_scaninfo","refresh","ap_list","r2","connectwifi","ssid","password","keyType","cypherType","set_stainfo","cypher_type","key_type","err_code","err_msg","info","r","power","powerState","transition","options","relay_state","set_relay_state","state","transition_light_state","ignore_default","on_off","transition_period","led","ledState","set_led_off","off","setName","newAlias","dev_name","set_dev_alias","daystat","month","year","now","Date","getMonth","getFullYear","get_daystat","cloud","get_info","schedule","get_rules","details","get_light_details","reboot","delay","buffer","key","i","c"],"mappings":"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"}